import requests
from bs4 import BeautifulSoup
import json
from datetime import datetime
import time
import re
import os
from typing import Optional, List, Dict
import sqlite3

def load_config():
    config_file = 'config.json'
    if not os.path.exists(config_file):
        config_file = 'config.example.json'
        print(f"‚ö†Ô∏è –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º {config_file}")
        print("‚ö†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    with open(config_file, 'r', encoding='utf-8') as f:
        return json.load(f)

class HHParser:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json'
        }
        self.base_url = "https://api.hh.ru/vacancies"
        self.params = {
            'text': '–≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂–µ—Ä',
            'area': '1',
            'per_page': 5,
            'order_by': 'publication_time',
            'period': 1
        }
        self.data_folder = "hh"
        self.messages_folder = os.path.join(self.data_folder, "messages")
        os.makedirs(self.messages_folder, exist_ok=True)
        self.max_pages = 2
        self.max_vacancies = 5

    async def get_saved_messages(self) -> set:
        saved_messages = set()
        try:
            conn = sqlite3.connect('users.db')
            c = conn.cursor()
            c.execute('SELECT message_id FROM sent_messages WHERE source = "hh"')
            for row in c.fetchall():
                vacancy_id = row[0].split('_')[-1]
                saved_messages.add(vacancy_id)
            conn.close()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(saved_messages)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return saved_messages

    def should_save_message(self, vacancy: Dict) -> bool:
        if not vacancy.get('name') and not vacancy.get('description'):
            return False
        text = f"{vacancy.get('name', '')} {vacancy.get('description', '')}".lower()
        config = load_config()
        include_filters = config.get('sources', {}).get('hh', {}).get('include_filters', [])
        exclude_filters = config.get('sources', {}).get('hh', {}).get('exclude_filters', [])
        for word in exclude_filters:
            if word.lower() in text:
                print(f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–∞—é—â–µ–µ —Å–ª–æ–≤–æ '{word}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
        if include_filters:
            for word in include_filters:
                if word.lower() in text:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤—É '{word}'")
                    return True
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Å–ª–æ–≤–∞–º –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        return True

    def parse_vacancy(self, vacancy: Dict) -> Optional[Dict]:
        try:
            return {
                'source': 'hh',
                'vacancy_id': vacancy['id'],
                'title': vacancy.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                'salary': self._format_salary(vacancy.get('salary')),
                'company': vacancy.get('employer', {}).get('name', '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
                'description': vacancy.get('description', ''),
                'link': vacancy.get('alternate_url', ''),
                'date': datetime.now().isoformat()
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            return None

    def _format_salary(self, salary_data: Optional[Dict]) -> str:
        if not salary_data:
            return "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        from_salary = salary_data.get('from')
        to_salary = salary_data.get('to')
        currency = salary_data.get('currency', 'RUR')
        if currency == 'RUR':
            currency = 'RUB'
        if from_salary and to_salary:
            return f"–æ—Ç {from_salary} –¥–æ {to_salary} {currency}"
        elif from_salary:
            return f"–æ—Ç {from_salary} {currency}"
        elif to_salary:
            return f"–¥–æ {to_salary} {currency}"
        return "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    async def run(self) -> bool:
        messages_data = []
        saved_messages = await self.get_saved_messages()
        consecutive_old_vacancies = 0
        max_old_vacancies = 3
        page = 0
        try:
            while page < self.max_pages:
                print(f"\nüîç –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å HH.ru (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {self.max_pages})...")
                self.params['page'] = page
                response = requests.get(self.base_url, params=self.params, headers=self.headers)
                if response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                    break
                data = response.json()
                vacancies = data.get('items', [])
                if not vacancies:
                    print("‚ÑπÔ∏è –ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    break
                print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru")
                found_new_on_page = False
                for vacancy in vacancies:
                    if len(messages_data) >= self.max_vacancies:
                        print(f"\n‚úã –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {self.max_vacancies} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
                        break
                    try:
                        vacancy_id = str(vacancy['id'])
                        if vacancy_id in saved_messages:
                            print(f"‚è© –í–∞–∫–∞–Ω—Å–∏—è {vacancy_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            consecutive_old_vacancies += 1
                            continue
                        consecutive_old_vacancies = 0
                        found_new_on_page = True
                        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é {vacancy_id}")
                        vacancy_response = requests.get(f"{self.base_url}/{vacancy_id}", headers=self.headers)
                        if vacancy_response.status_code == 200:
                            full_vacancy = vacancy_response.json()
                            if not self.should_save_message(full_vacancy):
                                continue
                            vacancy_data = self.parse_vacancy(full_vacancy)
                            if vacancy_data:
                                messages_data.append(vacancy_data)
                                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {vacancy_data['title']} ({len(messages_data)}/{self.max_vacancies})")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy.get('id')}: {str(e)}")
                        continue
                    time.sleep(1)
                if len(messages_data) >= self.max_vacancies:
                    break
                if not found_new_on_page and consecutive_old_vacancies >= max_old_vacancies:
                    print(f"\nüîÑ –ù–∞–π–¥–µ–Ω–æ {consecutive_old_vacancies} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∞—Ä—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫.")
                    break
                page += 1
                time.sleep(2)
            if messages_data:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_file = os.path.join(self.messages_folder, f'messages_{timestamp}.json')
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(messages_data, f, ensure_ascii=False, indent=4)
                print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages_data)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
                return True
            else:
                print("\n‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return False
        except Exception as e:
            print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            return False

async def main():
    try:
        config = load_config()
        if not config.get('sources', {}).get('hh', {}).get('enabled', False):
            print("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ HH –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HH –ø–∞—Ä—Å–µ—Ä–∞...")
        parser = HHParser()
        print("‚úÖ HH –ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        success = await parser.run()
        if success:
            print("\n‚úÖ HH –ø–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        else:
            print("\n‚ö†Ô∏è HH –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –±–µ–∑ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
        return success
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ HH –ø–∞—Ä—Å–µ—Ä–µ: {str(e)}")
        return False

if __name__ == '__main__':
    import asyncio
    success = asyncio.run(main())
    exit(0 if success else 1)
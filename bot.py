import json
import asyncio
import os
import random
import signal
import subprocess
import psutil
import re
from telethon import TelegramClient, events, Button
from telethon.errors import MessageNotModifiedError
from datetime import datetime, timedelta
import glob
from database import (
    add_user, 
    get_user, 
    user_exists, 
    is_admin as db_is_admin, 
    set_subscription,
    toggle_orders,
    update_sources,
    set_all_sources,
    set_admin,
    get_all_subscribed_users,
    add_sent_message,
    get_sent_messages_stats,
    cleanup_old_messages,
    is_message_sent,
    reset_subscription
)
import sqlite3

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
config_file = 'config.json'
if not os.path.exists(config_file):
    config_file = 'config.example.json'
    print(f"‚ö†Ô∏è –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º {config_file}")
    print("‚ö†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

with open(config_file, 'r', encoding='utf-8') as f:
    config = json.load(f)

for source in config['sources'].values():
    if source.get('enabled', False):
        for folder in [source['data_folder'], source['messages_folder'], source.get('media_folder', '')]:
            if folder and not os.path.exists(folder):
                os.makedirs(folder)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π
if config_file == 'config.example.json' or config.get('api_id') == "YOUR_TELEGRAM_API_ID":
    print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.json")
    exit(1)

bot = TelegramClient('tg_bot_session', config['api_id'], config['api_hash'])

is_running = True
parser_process = None
parser_task = None

def signal_handler(sig, frame):
    global is_running, parser_process, parser_task
    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    is_running = False
    
    if parser_process:
        kill_process_tree(parser_process.pid)
        parser_process = None
    
    if parser_task:
        parser_task.cancel()
        parser_task = None

    os._exit(0)

signal.signal(signal.SIGINT, signal_handler)

async def save_config():
    with open('config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=4)

def kill_process_tree(pid):
    try:
        parent = psutil.Process(pid)
        children = parent.children(recursive=True)
        for child in children:
            child.kill()
        parent.kill()
    except psutil.NoSuchProcess:
        pass

async def stop_parser():
    global parser_process, parser_task, is_running
    
    if parser_task:
        parser_task.cancel()
        parser_task = None
        return True
    return False

async def send_order_to_users(message):
    try:
        if message['source'] == 'telegram':
            source_id = str(message['channel_id'])
            source_info = config['sources']['telegram']['channels'].get(source_id, {})
        else:
            source_id = str(message['owner_id'])
            source_info = config['sources']['vk']['groups'].get(source_id, {})
            
        added_time = source_info.get('added_time', 0)
        
        if datetime.now().timestamp() - added_time < 240:
            print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_id}")
            return
            
        if is_message_sent(message['source'], source_id, str(message['message_id'])):
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message['message_id']} –∏–∑ {message['source']} {source_id} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
            
        users = get_all_subscribed_users()
        
        sent_to_users = False
        
        for user in users:
            if not user['orders_enabled']:
                continue
                
            if message['source'] == 'telegram' and not user['tg']:
                continue
            elif message['source'] == 'vk' and not user['vk']:
                continue
            elif message['source'] == 'site' and not user['site']:
                continue
            
            source_emoji = "üì¢" if message['source'] == 'telegram' else "üì±"
            formatted_message = f"""
{source_emoji} –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ {message['source'].title()}

üìù –¢–µ–∫—Å—Ç:
{message['text']}
"""
            try:
                if message.get('media_path') and os.path.exists(message['media_path']):
                    await bot.send_message(user['user_id'], formatted_message, file=message['media_path'])
                else:
                    await bot.send_message(user['user_id'], formatted_message)
                sent_to_users = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}")
                
        if sent_to_users:
            add_sent_message(message)
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}")

async def run_parser():
    global parser_process, parser_task
    try:
        if parser_task and not parser_task.done():
            return "‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
            
        parser_task = asyncio.create_task(parser_loop())
        return "‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞"

def clean_html(html_text: str) -> str:
    if not html_text:
        return ""
        
    html_text = html_text.replace('</p>', '\n')
    html_text = html_text.replace('<br />', '\n')
    html_text = html_text.replace('<br/>', '\n')
    html_text = html_text.replace('<br>', '\n')
    html_text = html_text.replace('</li>', '\n')
    html_text = html_text.replace('</ul>', '\n')
    html_text = html_text.replace('</strong>', '*')
    html_text = html_text.replace('<strong>', '*')
    
    clean_text = re.sub(r'<[^>]+>', '', html_text)
    clean_text = re.sub(r'\n\s*\n', '\n\n', clean_text)
    clean_text = '\n'.join(line.strip() for line in clean_text.splitlines())
    
    return clean_text.strip()

async def process_new_messages(source):
    try:
        users = get_all_subscribed_users()
        if not users:
            print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π")
            return

        messages_folder = config['sources'][source]['messages_folder']
        print(f"\nüìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É {messages_folder} –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source}")
        
        message_files = glob.glob(os.path.join(messages_folder, 'messages_*.json'))
        if not message_files:
            print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            return
            
        message_files.sort(key=os.path.getctime, reverse=True)
        latest_file = message_files[0]
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {latest_file}")
        
        try:
            with open(latest_file, 'r', encoding='utf-8') as f:
                messages = json.load(f)
                print(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ")
                
            for message in messages:
                if source == 'telegram':
                    source_id = str(message['channel_id'])
                    message_id = str(message['message_id'])
                elif source == 'vk':
                    source_id = str(message['owner_id'])
                    message_id = str(message['message_id'])
                elif source == 'hh':
                    source_id = 'hh'
                    message_id = str(message['vacancy_id'])
                    print(f"\nüíº –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ HH {message_id}:")
                    print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {message.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                else:
                    continue
                
                if is_message_sent(source, source_id, message_id):
                    print(f"‚úì –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ {source} {source_id} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    continue
                else:
                    print(f"üÜï –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ {source} {source_id}")
                
                if source == 'telegram':
                    text = f"üì± –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ Telegram\n\n{message['text']}"
                elif source == 'vk':
                    text = f"üíª –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ VK\n\n{message['text']}"
                elif source == 'hh':
                    description = clean_html(message.get('description', ''))
                    text = (f"üíº –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —Å HH.ru\n\n"
                           f"üîπ {message['title']}\n"
                           f"üí∞ {message['salary']}\n"
                           f"üè¢ {message['company']}\n\n"
                           f"üìù {description}\n\n"
                           f"üîó {message['link']}")
                else:
                    continue
                
                sent_to_users = False
                
                for user in users:
                    try:
                        if source == 'telegram' and not user['tg']:
                            continue
                        elif source == 'vk' and not user['vk']:
                            continue
                        elif source == 'hh' and not user['site']:
                            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–∞–π—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                            
                        if not user['orders_enabled']:
                            print(f"üë§ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']} –æ—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                            
                        if message.get('media_path') and os.path.exists(message['media_path']):
                            await bot.send_file(user['user_id'], 
                                              message['media_path'],
                                              caption=text[:1024])
                        else:
                            await bot.send_message(user['user_id'], text)
                            
                        sent_to_users = True
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}")
                        await asyncio.sleep(0.5)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}")
                        continue
                
                if sent_to_users:
                    try:
                        add_sent_message(message)
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ {source} {source_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {str(e)}")
                else:
                    print(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {latest_file}: {str(e)}")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

async def cleanup_channel_data(channel_id):
    try:
        media_files_to_delete = set()
        messages_folder = config['sources']['telegram']['messages_folder']
        
        for filename in os.listdir(messages_folder):
            if filename.endswith('.json'):
                file_path = os.path.join(messages_folder, filename)
                with open(file_path, 'r', encoding='utf-8') as f:
                    messages = json.load(f)
                
                for msg in messages:
                    if msg['channel_id'] == channel_id and msg.get('media_path'):
                        media_files_to_delete.add(msg['media_path'])
                
                filtered_messages = [msg for msg in messages if msg['channel_id'] != channel_id]
                
                if filtered_messages:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(filtered_messages, f, ensure_ascii=False, indent=4)
                else:
                    os.remove(file_path)
                    print(f"–£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: {filename}")
        
        deleted_files = 0
        for media_path in media_files_to_delete:
            try:
                if os.path.exists(media_path):
                    os.remove(media_path)
                    deleted_files += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {media_path}: {str(e)}")
        
        return True, f"–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã (—É–¥–∞–ª–µ–Ω–æ {deleted_files} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤)"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞: {str(e)}"

async def get_random_message():
    try:
        all_messages = []
        for source_name, source in config['sources'].items():
            if not source.get('enabled', False):
                continue
                
            message_files = [f for f in os.listdir(source['messages_folder']) if f.endswith('.json')]
            for file_name in message_files:
                file_path = os.path.join(source['messages_folder'], file_name)
                with open(file_path, 'r', encoding='utf-8') as f:
                    messages = json.load(f)
                    all_messages.extend(messages)
        
        if not all_messages:
            return None, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
            
        message = random.choice(all_messages)
        
        source_emoji = "üì¢" if message['source'] == 'telegram' else "üì±"
        formatted_message = f"""
{source_emoji} –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {message['source'].title()} –∫–∞–Ω–∞–ª–∞ {message['channel_id']}

üìù –¢–µ–∫—Å—Ç:
{message['text']}
"""
        return message, formatted_message
                
    except Exception as e:
        return None, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"

async def get_last_message():
    try:
        latest_file = None
        latest_time = 0
        source_folder = None
        
        for source_name, source in config['sources'].items():
            if not source.get('enabled', False):
                continue
                
            message_files = [f for f in os.listdir(source['messages_folder']) if f.endswith('.json')]
            for file_name in message_files:
                file_path = os.path.join(source['messages_folder'], file_name)
                file_time = os.path.getctime(file_path)
                if file_time > latest_time:
                    latest_time = file_time
                    latest_file = file_name
                    source_folder = source['messages_folder']
        
        if not latest_file:
            return None, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
            
        with open(os.path.join(source_folder, latest_file), 'r', encoding='utf-8') as f:
            messages = json.load(f)
            
        if not messages:
            return None, "–§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—É—Å—Ç"
            
        message = messages[0]
        
        source_emoji = "üì¢" if message['source'] == 'telegram' else "üì±"
        formatted_message = f"""
{source_emoji} –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {message['source'].title()} –∫–∞–Ω–∞–ª–∞ {message['channel_id']}

üìù –¢–µ–∫—Å—Ç:
{message['text']}
"""
        return message, formatted_message
                
    except Exception as e:
        return None, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"

def is_admin(user_id):
    return db_is_admin(user_id)

async def get_admin_buttons():
    global parser_process
    base_buttons = [
        [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", b"add_channel")],
        [Button.inline("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", b"remove_channel")],
        [Button.inline("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", b"list_channels")],
        [Button.inline("üíé –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", b"grant_subscription")]
    ]
    
    if parser_process and parser_process.returncode is None:
        base_buttons.append([Button.inline("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä", b"stop_parser")])
    else:
        base_buttons.append([Button.inline("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä", b"run_parser")])
    
    return base_buttons

async def add_channel_with_filters(event, channel_id):
    try:
        if 'sources' not in config:
            config['sources'] = {}
        if 'telegram' not in config['sources']:
            config['sources']['telegram'] = {'enabled': True, 'channels': {}}
        
        config['sources']['telegram']['channels'][str(channel_id)] = {
            'include_filters': [],
            'exclude_filters': [],
            'active': True,
            'added_time': datetime.now().timestamp()
        }
        await save_config()
        
        buttons = [
            [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", "add_include_" + str(channel_id))],
            [Button.inline("‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è", "add_exclude_" + str(channel_id))],
            [Button.inline("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", "finish_setup_" + str(channel_id))]
        ]
        await event.respond(
            f"Telegram –∫–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä—ã:\n"
            "‚Ä¢ –°–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è - —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–ª–æ–≤\n"
            "‚Ä¢ –°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è - —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª—é–±–æ–µ –∏–∑ —ç—Ç–∏—Ö —Å–ª–æ–≤\n\n"
            "‚ùóÔ∏è –ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã",
            buttons=buttons
        )
        return True
    except Exception as e:
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        return False

async def get_channel_info(channel_id):
    try:
        client = TelegramClient('tg_info_session', config['api_id'], config['api_hash'])
        await client.start()
        
        try:
            channel = await client.get_entity(int(channel_id))
            return {
                'title': getattr(channel, 'title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'username': getattr(channel, 'username', None)
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {str(e)}")
            return {
                'title': '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                'username': None
            }
        finally:
            await client.disconnect()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {str(e)}")
        return {
            'title': '–û—à–∏–±–∫–∞',
            'username': None
        }

@bot.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    user_id = event.sender_id
    username = event.sender.username
    
    if not user_exists(user_id):
        add_user(user_id, username)
    
    user = get_user(user_id)
    
    if is_admin(user_id):
        await update_admin_panel(event)
    else:
        if user and user['subscription_status']:
            subscription_end = datetime.strptime(user['subscription_end_date'], '%Y-%m-%d %H:%M:%S')
            days_left = (subscription_end - datetime.now()).days
            
            welcome_text = f"""
‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤!**

üîç **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**
‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'}

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if user['orders_enabled'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}
‚Ä¢ Telegram: {'‚úÖ' if user['tg'] else '‚ùå'}
‚Ä¢ VK: {'‚úÖ' if user['vk'] else '‚ùå'}
‚Ä¢ –°–∞–π—Ç—ã: {'‚úÖ' if user['site'] else '‚ùå'}

üí° –°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
"""
            buttons = [
                [Button.inline("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", b"about_service")],
                [Button.inline("üíé –ü–æ–¥–ø–∏—Å–∫–∞", b"subscription_info")],
                [Button.inline(
                    "üîî –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑—ã" if user['orders_enabled'] else "üîï –í–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑—ã", 
                    b"toggle_orders"
                )],
                [Button.inline("üéØ –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", b"source_filters")]
            ]
            await event.respond(welcome_text, buttons=buttons)
        else:
            welcome_text = """
üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤!**

üîç **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
‚Ä¢ –£–¥–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞

üíé **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:**
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:**
‚Ä¢ Telegram –∫–∞–Ω–∞–ª—ã
‚Ä¢ VK –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
‚Ä¢ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∞–π—Ç—ã (—Å–∫–æ—Ä–æ)

üí∞ **–¢–∞—Ä–∏—Ñ—ã:**
‚Ä¢ 1 –Ω–µ–¥–µ–ª—è - 190‚ÇΩ (2$)
‚Ä¢ 1 –º–µ—Å—è—Ü - 590‚ÇΩ (6$)
‚Ä¢ 2 –º–µ—Å—è—Ü–∞ - 990‚ÇΩ (10$)
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 1490‚ÇΩ (15$)
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 2990‚ÇΩ (30$)
‚Ä¢ 1 –≥–æ–¥ - 4990‚ÇΩ (50$)

‚ùóÔ∏è **–í–∞–∂–Ω–æ:** –°–µ–π—á–∞—Å —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. 
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.

"""
            buttons = [[Button.inline("üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", b"buy_subscription")]]
            await event.respond(welcome_text, buttons=buttons)

@bot.on(events.CallbackQuery)
async def callback_handler(event):
    user_id = event.sender_id
    data = event.data.decode()

    user = get_user(user_id)
    
    if not user:
        await event.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if user['subscription_status']:
        if data == "about_service":
            about_text = """
‚ÑπÔ∏è **–û —Å–µ—Ä–≤–∏—Å–µ**

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
‚Ä¢ Telegram –∫–∞–Ω–∞–ª—ã
‚Ä¢ VK –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
‚Ä¢ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∞–π—Ç—ã

üì® **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
2. –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
3. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
4. –í–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ

üéØ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –£–¥–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤
"""
            await event.edit(about_text, buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_main")]])
            
        elif data == "toggle_orders":
            success = toggle_orders(user_id)
            if success:
                user = get_user(user_id)
                await event.answer(
                    "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã" if user['orders_enabled'] else "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã",
                    alert=True
                )
                subscription_end = datetime.strptime(user['subscription_end_date'], '%Y-%m-%d %H:%M:%S')
                days_left = (subscription_end - datetime.now()).days
                
                welcome_text = f"""
‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤!**

üîç **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**
‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'}

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if user['orders_enabled'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}
‚Ä¢ Telegram: {'‚úÖ' if user['tg'] else '‚ùå'}
‚Ä¢ VK: {'‚úÖ' if user['vk'] else '‚ùå'}
‚Ä¢ –°–∞–π—Ç—ã: {'‚úÖ' if user['site'] else '‚ùå'}

üí° –°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏!
"""
                buttons = [
                    [Button.inline("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", b"about_service")],
                    [Button.inline("üíé –ü–æ–¥–ø–∏—Å–∫–∞", b"subscription_info")],
                    [Button.inline(
                        "üîî –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑—ã" if user['orders_enabled'] else "üîï –í–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑—ã", 
                        b"toggle_orders"
                    )],
                    [Button.inline("üéØ –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", b"source_filters")]
                ]
                await event.edit(welcome_text, buttons=buttons)
            else:
                await event.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", alert=True)

        elif data == "source_filters":
            filters_text = f"""
üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–∫–∞–∑–æ–≤**

–í—ã–±–µ—Ä–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã:

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ Telegram: {'‚úÖ' if user['tg'] else '‚ùå'}
‚Ä¢ VK: {'‚úÖ' if user['vk'] else '‚ùå'}
‚Ä¢ –°–∞–π—Ç—ã: {'‚úÖ' if user['site'] else '‚ùå'}

üí° –°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏!
"""
            buttons = [
                [Button.inline("üì± Telegram", b"toggle_tg")],
                [Button.inline("üí¨ VK", b"toggle_vk")],
                [Button.inline("üåê –°–∞–π—Ç—ã", b"toggle_site")],
                [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_main")]
            ]
            await event.edit(filters_text, buttons=buttons)

        elif data.startswith("toggle_"):
            source_type = data.split("_")[1]
            
            if source_type in ['tg', 'vk', 'site']:
                current_status = user[source_type]
                success = update_sources(user_id, source_type, not current_status)
                
                if success:
                    user = get_user(user_id)
                    filters_text = f"""
üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–∫–∞–∑–æ–≤**

–í—ã–±–µ—Ä–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã:

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ Telegram: {'‚úÖ' if user['tg'] else '‚ùå'}
‚Ä¢ VK: {'‚úÖ' if user['vk'] else '‚ùå'}
‚Ä¢ –°–∞–π—Ç—ã: {'‚úÖ' if user['site'] else '‚ùå'}

üí° –°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏!
"""
                    buttons = [
                        [Button.inline("üì± Telegram", b"toggle_tg")],
                        [Button.inline("üí¨ VK", b"toggle_vk")],
                        [Button.inline("üåê –°–∞–π—Ç—ã", b"toggle_site")],
                        [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_main")]
                    ]
                    await event.edit(filters_text, buttons=buttons)
                else:
                    await event.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", alert=True)

        elif data == "back_to_main":
            subscription_end = datetime.strptime(user['subscription_end_date'], '%Y-%m-%d %H:%M:%S')
            days_left = (subscription_end - datetime.now()).days
            
            welcome_text = f"""
‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤!**

üîç **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**
‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'}

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if user['orders_enabled'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}
‚Ä¢ Telegram: {'‚úÖ' if user['tg'] else '‚ùå'}
‚Ä¢ VK: {'‚úÖ' if user['vk'] else '‚ùå'}
‚Ä¢ –°–∞–π—Ç—ã: {'‚úÖ' if user['site'] else '‚ùå'}

üí° –°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏!
"""
            buttons = [
                [Button.inline("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", b"about_service")],
                [Button.inline("üíé –ü–æ–¥–ø–∏—Å–∫–∞", b"subscription_info")],
                [Button.inline(
                    "üîî –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑—ã" if user['orders_enabled'] else "üîï –í–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑—ã", 
                    b"toggle_orders"
                )],
                [Button.inline("üéØ –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", b"source_filters")]
            ]
            await event.edit(welcome_text, buttons=buttons)
            return

        elif data == "subscription_info":
            subscription_end = datetime.strptime(user['subscription_end_date'], '%Y-%m-%d %H:%M:%S')
            days_left = (subscription_end - datetime.now()).days
            end_date_formatted = subscription_end.strftime('%d.%m.%Y %H:%M')
            
            subscription_text = f"""
üíé **–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏**

üëâ **–¢–∞—Ä–∏—Ñ—ã:**
‚Ä¢ 1 –Ω–µ–¥–µ–ª—è - 190‚ÇΩ (2$)
‚Ä¢ 1 –º–µ—Å—è—Ü - 590‚ÇΩ (6$)
‚Ä¢ 2 –º–µ—Å—è—Ü–∞ - 990‚ÇΩ (10$)
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 1490‚ÇΩ (15$)
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 2990‚ÇΩ (30$)
‚Ä¢ 1 –≥–æ–¥ - 4990‚ÇΩ (50$)

üè¶ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**

üíµ **–ö—Ä–∏–ø—Ç–æ–π:**
`TMtZdB2KN7pYwHvdU6U8zEJR5axZHVE9u1` - Tron TRC20 

üí≥ **–ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É:**
`2200701786733433`
**(–î–∏–∞–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ –°.) –¢-–±–∞–Ω–∫**

üõ† –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —á–µ–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É @VECmanager
‚è± –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞

üìÖ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:**
‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_formatted}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {user['subscription_duration']} {'–º–µ—Å—è—Ü' if user['subscription_duration'] == 1 else '–º–µ—Å—è—Ü–∞' if 1 < user['subscription_duration'] < 5 else '–º–µ—Å—è—Ü–µ–≤'}
"""
            await event.edit(subscription_text, buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_main")]])
            return

        elif data == "back_to_main":
            subscription_end = datetime.strptime(user['subscription_end_date'], '%Y-%m-%d %H:%M:%S')
            days_left = (subscription_end - datetime.now()).days
            
            welcome_text = f"""
‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤!**

üîç **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**
‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'}

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if user['orders_enabled'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}
‚Ä¢ Telegram: {'‚úÖ' if user['tg'] else '‚ùå'}
‚Ä¢ VK: {'‚úÖ' if user['vk'] else '‚ùå'}
‚Ä¢ –°–∞–π—Ç—ã: {'‚úÖ' if user['site'] else '‚ùå'}

üí° –°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏!
"""
            buttons = [
                [Button.inline("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", b"about_service")],
                [Button.inline("üíé –ü–æ–¥–ø–∏—Å–∫–∞", b"subscription_info")],
                [Button.inline(
                    "üîî –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑—ã" if user['orders_enabled'] else "üîï –í–∫–ª—é—á–∏—Ç—å –∑–∞–∫–∞–∑—ã", 
                    b"toggle_orders"
                )],
                [Button.inline("üéØ –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", b"source_filters")]
            ]
            await event.edit(welcome_text, buttons=buttons)
            return

    if data == "buy_subscription":
        subscription_text = """
üíé **–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏**

üëâ **–¢–∞—Ä–∏—Ñ—ã:**
‚Ä¢ 1 –Ω–µ–¥–µ–ª—è - 190‚ÇΩ (2$)
‚Ä¢ 1 –º–µ—Å—è—Ü - 590‚ÇΩ (6$)
‚Ä¢ 2 –º–µ—Å—è—Ü–∞ - 990‚ÇΩ (10$)
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 1490‚ÇΩ (15$)
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 2990‚ÇΩ (30$)
‚Ä¢ 1 –≥–æ–¥ - 4990‚ÇΩ (50$)

üè¶ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**

üíµ **–ö—Ä–∏–ø—Ç–æ–π:**
`TMtZdB2KN7pYwHvdU6U8zEJR5axZHVE9u1` - Tron TRC20 

üí≥ **–ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É:**
`2200701786733433`
**(–î–∏–∞–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ –°.) –¢-–±–∞–Ω–∫**

üõ† –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —á–µ–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É @VECmanager
‚è± –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
"""
        await event.edit(
            subscription_text,
            buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_start")]]
        )
        return

    elif data == "back_to_start":
        welcome_text = """
üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤!**

üîç **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
‚Ä¢ –£–¥–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞

üíé **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:**
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:**
‚Ä¢ Telegram –∫–∞–Ω–∞–ª—ã
‚Ä¢ VK –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
‚Ä¢ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∞–π—Ç—ã (—Å–∫–æ—Ä–æ)

üí∞ **–¢–∞—Ä–∏—Ñ—ã:**
‚Ä¢ 1 –Ω–µ–¥–µ–ª—è - 190‚ÇΩ (2$)
‚Ä¢ 1 –º–µ—Å—è—Ü - 590‚ÇΩ (6$)
‚Ä¢ 2 –º–µ—Å—è—Ü–∞ - 990‚ÇΩ (10$)
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 1490‚ÇΩ (15$)
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 2990‚ÇΩ (30$)
‚Ä¢ 1 –≥–æ–¥ - 4990‚ÇΩ (50$)

‚ùóÔ∏è **–í–∞–∂–Ω–æ:** –°–µ–π—á–∞—Å —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. 
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.

"""
        buttons = [[Button.inline("üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", b"buy_subscription")]]
        await event.edit(welcome_text, buttons=buttons)
        return

    if not is_admin(user_id):
        await event.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    if data == "add_channel":
        bot.next_handler = "waiting_channel_id"
        await event.edit(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID Telegram –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ -100xxx...\n"
            "–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É @getmyid_bot",
            buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
        )
        
    elif data == "back_to_menu":
        await update_admin_panel(event)
        bot.next_handler = None
        
    elif data == "remove_channel":
        telegram_channels = config['sources']['telegram']['channels']
        if not telegram_channels:
            await event.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç", alert=True)
            return
            
        buttons = []
        for channel_id in telegram_channels:
            info = await get_channel_info(channel_id)
            channel_title = f"üì¢ {info['title']}"
            if info['username']:
                channel_title += f" (@{info['username']})"
            channel_title += f"\nID: {channel_id}"
            
            buttons.append([Button.inline(channel_title, f"remove_{channel_id}")])
            
        buttons.append([Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")])
        await event.edit("–í—ã–±–µ—Ä–∏—Ç–µ Telegram –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", buttons=buttons)
    
    elif data == "list_channels":
        telegram_channels = config['sources'].get('telegram', {}).get('channels', {})
        
        if not telegram_channels:
            await event.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç", alert=True)
            return
            
        channel_info = []
        for channel_id, settings in telegram_channels.items():
            info = await get_channel_info(channel_id)
            
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if settings['active'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            includes = ", ".join(settings['include_filters']) or "–Ω–µ—Ç"
            excludes = ", ".join(settings['exclude_filters']) or "–Ω–µ—Ç"
            
            channel_title = f"üì¢ {info['title']}"
            if info['username']:
                channel_title += f" (@{info['username']})"
            
            channel_info.append(
                f"{channel_title}\n"
                f"ID: {channel_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–°–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {includes}\n"
                f"–°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {excludes}\n"
            )
        
        await event.edit(
            "–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤:\n\n" + "\n\n".join(channel_info),
            buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
        )
    
    elif data.startswith("add_include_"):
        channel_id = data.split("_")[2]
        bot.next_handler = f"waiting_include_{channel_id}"
        await event.edit(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
            "–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–ª–æ–≤.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–∏–¥–µ–æ, –º–æ–Ω—Ç–∞–∂, —Ä–æ–ª–∏–∫",
            buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"finish_setup_{channel_id}")]]
        )
    
    elif data.startswith("add_exclude_"):
        channel_id = data.split("_")[2]
        bot.next_handler = f"waiting_exclude_{channel_id}"
        await event.edit(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
            "–°–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–∏ —Å–ª–æ–≤–∞, –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–µ–∑—é–º–µ, –∏—â—É —Ä–∞–±–æ—Ç—É, –≤–∞–∫–∞–Ω—Å–∏—è",
            buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"finish_setup_{channel_id}")]]
        )
    
    elif data.startswith("finish_setup_"):
        channel_id = data.split("_")[2]
        settings = config['sources']['telegram']['channels'][channel_id]
        includes = ", ".join(settings['include_filters']) or "–Ω–µ—Ç"
        excludes = ", ".join(settings['exclude_filters']) or "–Ω–µ—Ç"
        
        buttons = [
            [Button.inline("‚ûï –°–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", f"add_include_{channel_id}")],
            [Button.inline("‚ûñ –°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è", f"add_exclude_{channel_id}")],
            [Button.inline("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", b"back_to_menu")]
        ]
        
        await event.edit(
            f"üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}:\n\n"
            f"‚Ä¢ –°–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {includes}\n"
            f"‚Ä¢ –°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {excludes}",
            buttons=buttons
        )
    
    elif data == "test_post":
        messages_folder = config['sources']['telegram']['messages_folder']
        if not os.path.exists(messages_folder):
            await event.edit(
                "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
            )
            return
        
        message_files = glob.glob(os.path.join(messages_folder, "*.json"))
        if not message_files:
            await event.edit(
                "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
            )
            return
        
        message_file = random.choice(message_files)
        
        try:
            with open(message_file, 'r', encoding='utf-8') as f:
                messages = json.load(f)
                
            if not messages:
                await event.edit(
                    "‚ùå –§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—É—Å—Ç",
                    buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
                )
                return
                
            message = random.choice(messages)
            text = f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {message['channel_id']}:\n\n{message['text']}"
            
            if message.get('media_path'):
                media_path = message['media_path']
                if os.path.exists(media_path):
                    await event.edit(text, file=media_path, buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]])
                else:
                    await event.edit(
                        text + "\n\n‚ö†Ô∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
                    )
            else:
                await event.edit(text, buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]])
                
        except Exception as e:
            await event.edit(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
                buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
            )
    
    elif data == "run_parser":
        telegram_channels = config['sources'].get('telegram', {}).get('channels', {})
        if not telegram_channels:
            await event.answer("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", alert=True)
            return
            
        active_channels = [channel_id for channel_id, settings in telegram_channels.items() if settings['active']]
        if not active_channels:
            await event.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", alert=True)
            return
        
        message = await run_parser()
        await event.answer(message, alert=True)
        await update_admin_panel(event)

    elif data == "stop_parser":
        if await stop_parser():
            await event.answer("‚úÖ –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", alert=True)
            print("üõë –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await update_admin_panel(event)
        else:
            await event.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω", alert=True)

    elif data == "restart_parser":
        await stop_parser()
        success, message = await run_parser()
        if success:
            await event.answer("‚úÖ –ü–∞—Ä—Å–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω", alert=True)
            await update_admin_panel(event)
        else:
            await event.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞", alert=True)

    elif data.startswith("remove_"):
        channel_id = data.split("_")[1]
        telegram_channels = config['sources']['telegram']['channels']
        if channel_id in telegram_channels:
            del telegram_channels[channel_id]
            await save_config()
            
            success, message = await cleanup_channel_data(int(channel_id))
            if success:
                await event.respond(f"–ö–∞–Ω–∞–ª {channel_id} –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
            else:
                await event.respond(f"–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {message}")
                
            buttons = await get_admin_buttons()
            await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=buttons)
        else:
            await event.respond("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    elif data == "grant_subscription":
        bot.next_handler = "waiting_subscription_ids"
        await event.edit(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ 123456789, 987654321",
            buttons=[
                [Button.inline("1 –Ω–µ–¥–µ–ª—è", b"sub_duration_0.25")],
                [Button.inline("1 –º–µ—Å—è—Ü", b"sub_duration_1")],
                [Button.inline("2 –º–µ—Å—è—Ü–∞", b"sub_duration_2")],
                [Button.inline("3 –º–µ—Å—è—Ü–∞", b"sub_duration_3")],
                [Button.inline("6 –º–µ—Å—è—Ü–µ–≤", b"sub_duration_6")],
                [Button.inline("1 –≥–æ–¥", b"sub_duration_12")],
                [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]
            ]
        )

    elif data.startswith("sub_duration_"):
        duration = float(data.split("_")[-1])
        bot.subscription_duration = duration
        duration_text = "–Ω–µ–¥–µ–ª—é" if duration == 0.25 else f"{'–º–µ—Å—è—Ü' if duration == 1 else '–º–µ—Å—è—Ü–∞' if 1 < duration < 5 else '–º–µ—Å—è—Ü–µ–≤'}"
        bot.next_handler = "waiting_subscription_ids"
        await event.edit(
            f"–í—ã–±—Ä–∞–Ω —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {duration_text}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ 123456789, 987654321",
            buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
        )

    elif bot.next_handler == "waiting_subscription_ids":
        try:
            if not hasattr(bot, 'subscription_duration'):
                await event.respond(
                    "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫.",
                    buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"grant_subscription")]]
                )
                return

            user_ids = [int(id.strip()) for id in event.text.split(',')]
            success_ids = []
            failed_ids = []
            
            for user_id in user_ids:
                user = get_user(user_id)
                is_prolongation = user and user['subscription_status'] and user['subscription_end_date']
                
                if set_subscription(user_id, bot.subscription_duration):
                    updated_user = get_user(user_id)
                    success_ids.append(str(user_id))
                    
                    end_date = datetime.strptime(updated_user['subscription_end_date'], '%Y-%m-%d %H:%M:%S')
                    days_left = (end_date - datetime.now()).days
                    end_date_formatted = end_date.strftime('%d.%m.%Y')
                    
                    if is_prolongation:
                        notification_text = f"""
‚ú® **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!**

‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {get_duration_text(bot.subscription_duration)}
üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_formatted}
‚åõÔ∏è –í—Å–µ–≥–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'}
üîÑ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {updated_user['subscription_duration']} {'–º–µ—Å—è—Ü' if updated_user['subscription_duration'] == 1 else '–º–µ—Å—è—Ü–∞' if 1 < updated_user['subscription_duration'] < 5 else '–º–µ—Å—è—Ü–µ–≤'}

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ
"""
                    else:
                        notification_text = f"""
‚ú® **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏!**

‚è≥ –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {get_duration_text(bot.subscription_duration)}
üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_formatted}
‚åõÔ∏è –î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'}

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ
"""
                    try:
                        await bot.send_message(user_id, notification_text)
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                else:
                    failed_ids.append(str(user_id))
            
            report = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ {get_duration_text(bot.subscription_duration)}:\n\n"
            
            if success_ids:
                report += "‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ:\n"
                for user_id in success_ids:
                    user = get_user(int(user_id))
                    if user:
                        end_date = datetime.strptime(user['subscription_end_date'], '%Y-%m-%d %H:%M:%S')
                        days_left = (end_date - datetime.now()).days
                        end_date_formatted = end_date.strftime('%d.%m.%Y')
                        
                        username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                        
                        report += f"üë§ {username} (ID: {user_id})\n"
                        report += f"   ‚åõÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞: {user['subscription_duration']} {'–º–µ—Å—è—Ü' if user['subscription_duration'] == 1 else '–º–µ—Å—è—Ü–∞' if 1 < user['subscription_duration'] < 5 else '–º–µ—Å—è—Ü–µ–≤'}\n"
                        report += f"   üìÖ –î–æ: {end_date_formatted} ({days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'})\n\n"
                
            if failed_ids:
                report += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å:\n"
                for user_id in failed_ids:
                    user = get_user(int(user_id))
                    username = f"@{user['username']}" if user and user['username'] else "–±–µ–∑ username"
                    report += f"‚Ä¢ {username} (ID: {user_id})\n"
            
            delattr(bot, 'subscription_duration')
            bot.next_handler = None
            
            buttons = await get_admin_buttons()
            await event.respond(report, buttons=buttons)
            
        except ValueError:
            await event.respond(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥",
                buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
            )
        return

@bot.on(events.NewMessage)
async def message_handler(event):
    if not hasattr(bot, 'next_handler') or bot.next_handler is None:
        return
        
    if bot.next_handler == "waiting_channel_id":
        try:
            channel_id = int(event.text)
            telegram_channels = config['sources']['telegram']['channels']
            if str(channel_id) not in telegram_channels:
                await add_channel_with_filters(event, channel_id)
            else:
                await event.respond(
                    "–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω",
                    buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
                )
        except ValueError:
            await event.respond(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
            )
        bot.next_handler = None
    
    elif isinstance(bot.next_handler, str) and bot.next_handler.startswith("waiting_include_"):
        channel_id = bot.next_handler.split("_")[2]
        words = [word.strip().lower() for word in event.text.split(",") if word.strip()]
        config['sources']['telegram']['channels'][channel_id]['include_filters'] = words
        await save_config()
        
        settings = config['sources']['telegram']['channels'][channel_id]
        includes = ", ".join(settings['include_filters']) or "–Ω–µ—Ç"
        excludes = ", ".join(settings['exclude_filters']) or "–Ω–µ—Ç"
        
        buttons = [
            [Button.inline("‚ûï –°–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", f"add_include_{channel_id}")],
            [Button.inline("‚ûñ –°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è", f"add_exclude_{channel_id}")],
            [Button.inline("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", b"back_to_menu")]
        ]
        
        await event.respond(
            f"üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}:\n\n"
            f"‚Ä¢ –°–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {includes}\n"
            f"‚Ä¢ –°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {excludes}",
            buttons=buttons
        )
        
        bot.next_handler = None
    
    elif isinstance(bot.next_handler, str) and bot.next_handler.startswith("waiting_exclude_"):
        channel_id = bot.next_handler.split("_")[2]
        words = [word.strip().lower() for word in event.text.split(",") if word.strip()]
        config['sources']['telegram']['channels'][channel_id]['exclude_filters'] = words
        await save_config()
        
        settings = config['sources']['telegram']['channels'][channel_id]
        includes = ", ".join(settings['include_filters']) or "–Ω–µ—Ç"
        excludes = ", ".join(settings['exclude_filters']) or "–Ω–µ—Ç"
        
        buttons = [
            [Button.inline("‚ûï –°–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", f"add_include_{channel_id}")],
            [Button.inline("‚ûñ –°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è", f"add_exclude_{channel_id}")],
            [Button.inline("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", b"back_to_menu")]
        ]
        
        await event.respond(
            f"üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}:\n\n"
            f"‚Ä¢ –°–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {includes}\n"
            f"‚Ä¢ –°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {excludes}",
            buttons=buttons
        )
        
        bot.next_handler = None

    elif bot.next_handler == "waiting_subscription_ids":
        try:
            if not hasattr(bot, 'subscription_duration'):
                await event.respond(
                    "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫.",
                    buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"grant_subscription")]]
                )
                return

            user_ids = [int(id.strip()) for id in event.text.split(',')]
            success_ids = []
            failed_ids = []
            
            for user_id in user_ids:
                user = get_user(user_id)
                is_prolongation = user and user['subscription_status'] and user['subscription_end_date']
                
                if set_subscription(user_id, bot.subscription_duration):
                    updated_user = get_user(user_id)
                    success_ids.append(str(user_id))
                    
                    end_date = datetime.strptime(updated_user['subscription_end_date'], '%Y-%m-%d %H:%M:%S')
                    days_left = (end_date - datetime.now()).days
                    end_date_formatted = end_date.strftime('%d.%m.%Y')
                    
                    if is_prolongation:
                        notification_text = f"""
‚ú® **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!**

‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {get_duration_text(bot.subscription_duration)}
üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_formatted}
‚åõÔ∏è –í—Å–µ–≥–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'}
üîÑ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {updated_user['subscription_duration']} {'–º–µ—Å—è—Ü' if updated_user['subscription_duration'] == 1 else '–º–µ—Å—è—Ü–∞' if 1 < updated_user['subscription_duration'] < 5 else '–º–µ—Å—è—Ü–µ–≤'}

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ
"""
                    else:
                        notification_text = f"""
‚ú® **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏!**

‚è≥ –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {get_duration_text(bot.subscription_duration)}
üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_formatted}
‚åõÔ∏è –î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'}

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ
"""
                    try:
                        await bot.send_message(user_id, notification_text)
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                else:
                    failed_ids.append(str(user_id))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
            report = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ {get_duration_text(bot.subscription_duration)}:\n\n"
            
            if success_ids:
                report += "‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ:\n"
                for user_id in success_ids:
                    user = get_user(int(user_id))
                    if user:
                        end_date = datetime.strptime(user['subscription_end_date'], '%Y-%m-%d %H:%M:%S')
                        days_left = (end_date - datetime.now()).days
                        end_date_formatted = end_date.strftime('%d.%m.%Y')
                        username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                        report += f"üë§ {username} (ID: {user_id})\n"
                        report += f"   ‚åõÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞: {user['subscription_duration']} {'–º–µ—Å—è—Ü' if user['subscription_duration'] == 1 else '–º–µ—Å—è—Ü–∞' if 1 < user['subscription_duration'] < 5 else '–º–µ—Å—è—Ü–µ–≤'}\n"
                        report += f"   üìÖ –î–æ: {end_date_formatted} ({days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if 1 < days_left < 5 else '–¥–Ω–µ–π'})\n\n"
                
            if failed_ids:
                report += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å:\n"
                for user_id in failed_ids:
                    user = get_user(int(user_id))
                    username = f"@{user['username']}" if user and user['username'] else "–±–µ–∑ username"
                    report += f"‚Ä¢ {username} (ID: {user_id})\n"
            
            delattr(bot, 'subscription_duration')
            bot.next_handler = None
            
            buttons = await get_admin_buttons()
            await event.respond(report, buttons=buttons)
            
        except ValueError:
            await event.respond(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥",
                buttons=[[Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"back_to_menu")]]
            )
        return

@bot.on(events.NewMessage(pattern='/add_admin'))
async def add_admin_handler(event):
    user_id = event.sender_id
    if not is_admin(user_id):
        return
    
    try:
        command_args = event.message.text.split()
        if len(command_args) != 2:
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_admin ID`\n–≥–¥–µ ID —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        new_admin_id = int(command_args[1])
        
        if not user_exists(new_admin_id):
            await event.respond("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        if is_admin(new_admin_id):
            await event.respond("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
            
        if set_admin(new_admin_id, True):
            await event.respond(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        else:
            await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
    except ValueError:
        await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_admin ID`\n–≥–¥–µ ID —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await event.respond(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.on(events.NewMessage(pattern='/remove_admin'))
async def remove_admin_handler(event):
    user_id = event.sender_id
    if not is_admin(user_id):
        return
    
    try:
        command_args = event.message.text.split()
        if len(command_args) != 2:
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remove_admin ID`\n–≥–¥–µ ID —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        admin_id = int(command_args[1])
        
        if not user_exists(admin_id):
            await event.respond("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        if not is_admin(admin_id):
            await event.respond("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
            
        if set_admin(admin_id, False):
            await event.respond(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        else:
            await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
    except ValueError:
        await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remove_admin ID`\n–≥–¥–µ ID —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    except Exception as e:
        await event.respond(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def update_admin_panel(event):
    global parser_task
    telegram_channels = config['sources'].get('telegram', {}).get('channels', {})
    channel_count = len(telegram_channels)
    parser_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if parser_task and not parser_task.done() else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    last_run = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    try:
        messages_folder = config['sources']['telegram']['messages_folder']
        message_files = [f for f in os.listdir(messages_folder) if f.endswith('.json')]
        if message_files:
            latest_file = max(message_files, key=lambda x: os.path.getctime(os.path.join(messages_folder, x)))
            last_run = datetime.fromtimestamp(os.path.getctime(os.path.join(messages_folder, latest_file))).strftime("%d.%m.%Y %H:%M")
    except Exception:
        pass

    panel_text = f"""
üéØ **–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º**

üîç **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–º
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚ûï *–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª* - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
‚ûñ *–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª* - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
üìã *–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤* - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
üîÑ *–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä* - –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π

üë®‚Äçüíº **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:**
‚Ä¢ `/add_admin ID` - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/remove_admin ID` - —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/reset_subscription ID` - –æ–±–Ω—É–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/stats` - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –µ–≥–æ ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ -100xxx...
–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É @getmyid_bot

‚ÑπÔ∏è –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {channel_count}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞: {last_run}
‚Ä¢ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞: {parser_status}
"""

    buttons = await get_admin_buttons()

    try:
        if hasattr(event, 'message') and event.message:
            try:
                await event.message.delete()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await event.respond(panel_text, buttons=buttons)

async def cleanup_sent_messages(file_path, messages):
    try:
        for message in messages:
            if message.get('media_path') and os.path.exists(message['media_path']):
                try:
                    os.remove(message['media_path'])
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª: {message['media_path']}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {message['media_path']}: {str(e)}")
        
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {file_path}")
            
        print(f"‚úÖ –û—á–∏—â–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã")
        cleanup_old_messages(30)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

async def parser_loop():
    while is_running:
        try:
            if config['sources']['telegram'].get('enabled'):
                print("\nüí¨ –ó–∞–ø—É—Å–∫ Telegram –ø–∞—Ä—Å–µ—Ä–∞...")
                tg_process = await asyncio.create_subprocess_exec(
                    'python', '-u', 'tg_parser.py',
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE,
                    env={**os.environ, 'PYTHONIOENCODING': 'utf-8', 'PYTHONUNBUFFERED': '1'}
                )
                
                while True:
                    try:
                        line = await tg_process.stdout.readline()
                        if not line:
                            break
                        print(line.decode('utf-8', errors='ignore').strip())
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞ Telegram –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}")
                        break
                
                await tg_process.wait()
                await process_new_messages('telegram')
            
            if config['sources']['vk'].get('enabled'):
                print("\nüí¨ –ó–∞–ø—É—Å–∫ VK –ø–∞—Ä—Å–µ—Ä–∞...")
                vk_process = await asyncio.create_subprocess_exec(
                    'python', '-u', 'vk_parser.py',
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE,
                    env={**os.environ, 'PYTHONIOENCODING': 'utf-8', 'PYTHONUNBUFFERED': '1'}
                )
                
                while True:
                    try:
                        line = await vk_process.stdout.readline()
                        if not line:
                            break
                        print(line.decode('utf-8', errors='ignore').strip())
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞ VK –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}")
                        break
                
                await vk_process.wait()
                await process_new_messages('vk')
            
            if config['sources']['hh'].get('enabled'):
                print("\nüíº –ó–∞–ø—É—Å–∫ HH –ø–∞—Ä—Å–µ—Ä–∞...")
                hh_process = await asyncio.create_subprocess_exec(
                    'python', '-u', 'hh_parser.py',
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE,
                    env={**os.environ, 'PYTHONIOENCODING': 'utf-8', 'PYTHONUNBUFFERED': '1'}
                )
                
                while True:
                    try:
                        line = await hh_process.stdout.readline()
                        if not line:
                            break
                        print(line.decode('utf-8', errors='ignore').strip())
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞ HH –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}")
                        break
                
                await hh_process.wait()
                await process_new_messages('hh')
            
            await asyncio.sleep(120)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}")
            await asyncio.sleep(60)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        await bot.start(bot_token=config['bot_token'])
        await bot.run_until_disconnected()
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if parser_process:
            kill_process_tree(parser_process.pid)
            parser_process = None
        await bot.disconnect()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@bot.on(events.NewMessage(pattern='/stats'))
async def stats_handler(event):
    user_id = event.sender_id
    if not is_admin(user_id):
        return
        
    try:
        stats = get_sent_messages_stats()
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**

üìà –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['total']}
üïí –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {stats['last_24h']}

üì± –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:"""

        for source, count in stats['by_source'].items():
            emoji = "üì¢" if source == "telegram" else "üí¨" if source == "vk" else "üåê"
            stats_text += f"\n{emoji} {source.title()}: {count}"
            
        await event.respond(stats_text)
            
    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@bot.on(events.NewMessage(pattern='/reset_subscription'))
async def reset_subscription_handler(event):
    user_id = event.sender_id
    if not is_admin(user_id):
        return
    
    try:
        command_args = event.message.text.split()
        if len(command_args) != 2:
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reset_subscription ID`\n–≥–¥–µ ID —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        target_user_id = int(command_args[1])
        if not user_exists(target_user_id):
            await event.respond("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        user = get_user(target_user_id)
        username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
        
        if reset_subscription(target_user_id):
            await event.respond(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {target_user_id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω–∞")
            
            try:
                notification_text = """
‚ùóÔ∏è **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞**

–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.
–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö.
"""
                await bot.send_message(target_user_id, notification_text)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        else:
            await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
            
    except ValueError:
        await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reset_subscription ID`\n–≥–¥–µ ID —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await event.respond(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def get_duration_text(duration: float) -> str:
    if duration == 0.25:
        return "1 –Ω–µ–¥–µ–ª—é"
    elif duration == 1:
        return "1 –º–µ—Å—è—Ü"
    elif duration == 2:
        return "2 –º–µ—Å—è—Ü–∞"
    elif duration == 3:
        return "3 –º–µ—Å—è—Ü–∞"
    elif duration == 6:
        return "6 –º–µ—Å—è—Ü–µ–≤"
    elif duration == 12:
        return "1 –≥–æ–¥"
    else:
        return f"{duration} –º–µ—Å—è—Ü–µ–≤"

def cleanup_old_messages(days: int):
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        cutoff_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d %H:%M:%S')
        c.execute('DELETE FROM sent_messages WHERE sent_date < ?', (cutoff_date,))
        deleted_count = c.rowcount
        conn.commit()
        conn.close()
        
        if deleted_count > 0:
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

if __name__ == '__main__':
    asyncio.run(main())
import json
import asyncio
import os
from telethon import TelegramClient
from datetime import datetime
from telethon.tl.types import InputPeerChannel, PeerChannel

def load_config():
    config_file = 'config.json'
    if not os.path.exists(config_file):
        config_file = 'config.example.json'
        print(f"‚ö†Ô∏è –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º {config_file}")
        print("‚ö†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    with open(config_file, 'r', encoding='utf-8') as f:
        return json.load(f)

config = load_config()
telegram_config = config['sources']['telegram']

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API
if config.get('api_id') == "YOUR_TELEGRAM_API_ID" or config.get('api_hash') == "YOUR_TELEGRAM_API_HASH":
    print("‚ùå –û—à–∏–±–∫–∞: Telegram API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.json")
    exit(1)

for folder in [telegram_config['data_folder'], telegram_config['messages_folder'], telegram_config['media_folder']]:
    if not os.path.exists(folder):
        os.makedirs(folder)

async def resolve_channel(client, channel_id):
    try:
        channel = await client.get_input_entity(channel_id)
        return channel
    except ValueError:
        try:
            if str(channel_id).startswith('-100'):
                channel_id = int(str(channel_id)[4:])
            channel = await client.get_input_entity(PeerChannel(channel_id))
            return channel
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {str(e)}")
            return None

async def get_saved_messages():
    saved_messages = set()
    try:
        for filename in os.listdir(telegram_config['messages_folder']):
            if filename.endswith('.json'):
                file_path = os.path.join(telegram_config['messages_folder'], filename)
                with open(file_path, 'r', encoding='utf-8') as f:
                    messages = json.load(f)
                    for msg in messages:
                        msg_id = f"tg_{msg['channel_id']}_{msg['message_id']}"
                        saved_messages.add(msg_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
    return saved_messages

def should_save_message(message, channel_settings):
    if not message.text:
        return False
        
    text = message.text.lower()
    
    for word in channel_settings['exclude_filters']:
        if word.lower() in text:
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–∞—é—â–µ–µ —Å–ª–æ–≤–æ '{word}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
    
    if channel_settings['include_filters']:
        for word in channel_settings['include_filters']:
            if word.lower() in text:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤—É '{word}'")
                return True
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Å–ª–æ–≤–∞–º –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return False
    
    return True

async def get_last_messages():
    messages_data = []
    
    try:
        config = load_config()
        telegram_config = config['sources']['telegram']
        
        if not telegram_config.get('enabled', False):
            print("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ Telegram –æ—Ç–∫–ª—é—á–µ–Ω")
            return False
            
        channels = telegram_config.get('channels', {})
        
        if not channels:
            print("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤")
            return False
            
        active_channels = [channel_id for channel_id, settings in channels.items() if settings['active']]
        if not active_channels:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤")
            return False
        
        saved_messages = await get_saved_messages()
        
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")
        client = TelegramClient('tg_parser_session', config['api_id'], config['api_hash'])
        
        try:
            print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await client.start()
            
            if not await client.is_user_authorized():
                print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
                print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +375291234567):")
                phone = input()
                await client.send_code_request(phone)
                print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:")
                code = input()
                await client.sign_in(phone, code)
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {str(e)}")
            if hasattr(e, '__class__'):
                print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}")
            return False
        
        try:
            async with client:
                for channel_id, settings in channels.items():
                    if not settings['active']:
                        print(f"‚ÑπÔ∏è Telegram –∫–∞–Ω–∞–ª {channel_id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                        
                    try:
                        print(f"üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel_id}...")
                        channel_id = int(channel_id)
                        channel = await resolve_channel(client, channel_id)
                        if not channel:
                            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é Telegram –∫–∞–Ω–∞–ª {channel_id} - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø")
                            continue
                            
                        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é Telegram –∫–∞–Ω–∞–ª {channel_id}...")
                        
                        messages = await client.get_messages(channel, limit=1)
                        if not messages or len(messages) == 0:
                            print(f"‚ÑπÔ∏è –í Telegram –∫–∞–Ω–∞–ª–µ {channel_id} –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
                            continue
                            
                        message = messages[0]
                        
                        msg_id = f"tg_{channel_id}_{message.id}"
                        if msg_id in saved_messages:
                            print(f"‚úì –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                        
                        if not should_save_message(message, settings):
                            continue
                        
                        message_info = {
                            'source': 'telegram',
                            'channel_id': channel_id,
                            'message_id': message.id,
                            'date': message.date.isoformat(),
                            'text': message.text,
                            'views': message.views if hasattr(message, 'views') else None,
                            'media_type': None,
                            'media_path': None
                        }

                        if message.media:
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            if hasattr(message.media, 'photo'):
                                message_info['media_type'] = 'photo'
                                file_path = os.path.join(telegram_config['media_folder'], f"photo_{timestamp}.jpg")
                                await message.download_media(file_path)
                                message_info['media_path'] = file_path
                                
                            elif hasattr(message.media, 'document'):
                                for attribute in message.media.document.attributes:
                                    if hasattr(attribute, 'mime_type'):
                                        message_info['media_type'] = attribute.mime_type
                                    elif hasattr(attribute, 'animated'):
                                        message_info['media_type'] = 'gif'
                                
                                extension = '.mp4' if message_info['media_type'] == 'video' else '.gif'
                                file_path = os.path.join(telegram_config['media_folder'], f"media_{timestamp}{extension}")
                                await message.download_media(file_path)
                                message_info['media_path'] = file_path
                        
                        messages_data.append(message_info)
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ {channel_id}")
                        if message_info['media_path']:
                            print(f"üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {message_info['media_path']}")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")
                        if hasattr(e, '__class__'):
                            print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}")
            
            if messages_data:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_file = os.path.join(telegram_config['messages_folder'], f'messages_{timestamp}.json')
                
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(messages_data, f, ensure_ascii=False, indent=4)
                
                print(f"‚úÖ –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
                return True
            else:
                print("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return False
        
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            if hasattr(e, '__class__'):
                print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}")
            return False
        finally:
            await client.disconnect()
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        if hasattr(e, '__class__'):
            print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}")
        return False

if __name__ == '__main__':
    success = asyncio.run(get_last_messages())
    exit(0 if success else 1)